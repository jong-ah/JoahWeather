{"version":3,"sources":["App.js"],"names":["SCREEN_WIDTH","Dimensions","get","width","icons","Clouds","Clear","Atmosphere","Snow","Rain","Drizzle","Thunderstorm","App","useState","city","setCity","days","setDays","setOk","useEffect","a","async","Location","granted","accuracy","coords","latitude","longitude","useGoogleMaps","location","fetch","response","json","daily","getWeather","style","styles","container","cityName","pagingEnabled","horizontal","showsHorizontalScrollIndicator","contentContainerStyle","weather","length","day","alignItems","color","marginTop","size","map","index","key","flexDirection","justifyContent","temp","parseFloat","toFixed","name","main","description","tinyText","StyleSheet","create","flex","backgroundColor","fontSize","fontWeight","paddingHorizontal"],"mappings":"q0BAcA,IAAeA,EAAiBC,IAAWC,IAAI,UAAvCC,MAKFC,EAAQ,CACZC,OAAQ,SACRC,MAAO,YACPC,WAAY,eACZC,KAAM,OACNC,KAAM,QACNC,QAAS,OACTC,aAAc,YAGD,SAASC,IACtB,MAAwBC,mBAAS,cAAjC,WAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,WAAOG,EAAP,KAAaC,EAAb,KACA,EAAoBJ,oBAAS,GAA7B,WAAWK,GAAX,WAwCA,OAJAC,qBAAU,YAnCS,iCAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAESE,OAFT,yBAETC,SAGNL,GAAM,GALS,WAAAE,EAAA,MAWPE,IAAiC,CAAEE,SAAU,KAXtC,2BAUfC,OAAUC,EAVK,EAULA,SAAUC,EAVL,EAUKA,UAVL,YAAAP,EAAA,MAcME,IACrB,CAAEI,WAAUC,aACZ,CAAEC,eAAe,KAhBF,eAcXC,EAdW,OAmBjBd,EAAQc,EAAS,GAAGf,MAnBH,YAAAM,EAAA,MAuBMU,MAAM,uDAC4BJ,EAD7B,QAC6CC,EAD5C,wEAvBZ,eAuBXI,EAvBW,mBAAAX,EAAA,MA2BEW,EAASC,QA3BX,QA2BXA,EA3BW,OAgCjBf,EAAQe,EAAKC,OAhCI,6DAoCjBC,KACC,IAGD,kBAAC,IAAD,CAAMC,MAAOC,EAAOC,WAClB,kBAAC,IAAD,CAAMF,MAAOC,EAAOtB,MAClB,kBAAC,IAAD,CAAMqB,MAAOC,EAAOE,UAAWxB,IAEjC,kBAAC,IAAD,CACEyB,eAAa,EACbC,YAAU,EACVC,gCAAgC,EAChCC,sBAAuBN,EAAOO,SAEb,IAAhB3B,EAAK4B,OACJ,kBAAC,IAAD,CAAMT,MAAK,OAAOC,EAAOS,KAAd,IAAmBC,WAAY,YAExC,kBAAC,IAAD,CACEC,MAAM,QACNZ,MAAO,CAAEa,UAAW,IACpBC,KAAK,WAITjC,EAAKkC,KAAI,SAACL,EAAKM,GAAN,OACP,kBAAC,IAAD,CAAMC,IAAKD,EAAOhB,MAAOC,EAAOS,KAC9B,kBAAC,IAAD,CACEV,MAAO,CACLkB,cAAe,MACfP,WAAY,SACZ3C,MAAO,OACPmD,eAAgB,kBAGlB,kBAAC,IAAD,CAAMnB,MAAOC,EAAOmB,MAEjBC,WAAWX,EAAIU,KAAKV,KAAKY,QAAQ,IAEpC,kBAAC,IAAD,CACEC,KAAMtD,EAAMyC,EAAIF,QAAQ,GAAGgB,MAC3BV,KAAM,GACNF,MAAM,WAIV,kBAAC,IAAD,CAAMZ,MAAOC,EAAOwB,aAAcf,EAAIF,QAAQ,GAAGgB,MACjD,kBAAC,IAAD,CAAMxB,MAAOC,EAAOyB,UAAWhB,EAAIF,QAAQ,GAAGiB,kBAKtD,kBAAC,IAAD,OAKN,IAAMxB,EAAS0B,IAAWC,OAAO,CAC/B1B,UAAW,CACT2B,KAAM,EACNC,gBAAiB,UAEnBnD,KAAM,CACJkD,KAAM,IACNV,eAAgB,SAChBR,WAAY,UAEdR,SAAU,CACR4B,SAAU,GACVC,WAAY,OAEdxB,QAAS,GACTE,IAAK,CACH1C,MAAOH,EACP8C,WAAY,aACZsB,kBAAmB,IAErBb,KAAM,CACJP,UAAW,GACXmB,WAAY,MACZD,SAAU,KAEZN,YAAa,CACXZ,WAAY,GACZkB,SAAU,GACVC,WAAY,OAEdN,SAAU,CACRb,WAAY,EACZkB,SAAU,GACVC,WAAY,U","file":"static/js/app.e0166fd3.chunk.js","sourcesContent":["// StatusBar는 상태바와 소통한다. 시계, 배터리, 와이파이를 보여준다. 지워도 상관없다. 변화를 주고 싶으면 사용한다.\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport {\n  ActivityIndicator,\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  Dimensions,\n} from 'react-native';\nimport * as Location from 'expo-location';\nimport { Fontisto } from '@expo/vector-icons';\n\nconst { width: SCREEN_WIDTH } = Dimensions.get('window');\n\n// 원래대로라면 서버에 저장하겠지만, 교육용이고 무료로 생성 가능한 것이므로 여기에 적는다.\nconst API_KEY = 'e3882baac5cf3c79ab66b6e597de1e5a';\n\nconst icons = {\n  Clouds: 'cloudy',\n  Clear: 'day-sunny',\n  Atmosphere: 'cloudy-gusts',\n  Snow: 'snow',\n  Rain: 'rains',\n  Drizzle: 'rain',\n  Thunderstorm: 'lighting',\n};\n\nexport default function App() {\n  const [city, setCity] = useState('Loading...');\n  const [days, setDays] = useState([]);\n  const [ok, setOk] = useState(true);\n  const getWeather = async () => {\n    // 유저의 지리 정보를 얻을 수 있는지 확인한다.\n    const { granted } = await Location.requestForegroundPermissionsAsync();\n\n    if (!granted) {\n      setOk(false);\n    }\n\n    // 유저의 지리 좌표를 얻는다.\n    const {\n      coords: { latitude, longitude },\n    } = await Location.getCurrentPositionAsync({ accuracy: 5 });\n\n    // 유저의 지리 좌표를 가지고 도시명을 얻는다.\n    const location = await Location.reverseGeocodeAsync(\n      { latitude, longitude },\n      { useGoogleMaps: false }\n    );\n\n    setCity(location[0].city);\n\n    // open weather api에서 가져온 날짜 정보\n    // 한국 온도로 표시하려면 끝에 'units=metric' 적어야한다. (기본 미국)\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=alerts&appid=${API_KEY}&units=metric`\n    );\n\n    const json = await response.json();\n\n    // console.log로 결과를 확인하고 싶다면\n    // 핸드폰 흔들어서 'stop remote debugging'을 누르고 브라우저 콘솔창에서 확인하면 된다.\n\n    setDays(json.daily);\n  };\n\n  useEffect(() => {\n    getWeather();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.city}>\n        <Text style={styles.cityName}>{city}</Text>\n      </View>\n      <ScrollView\n        pagingEnabled\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={styles.weather}\n      >\n        {days.length === 0 ? (\n          <View style={{ ...styles.day, alignItems: 'center' }}>\n            {/* 로딩 표시, 운영체제마다 다름 */}\n            <ActivityIndicator\n              color=\"white\"\n              style={{ marginTop: 10 }}\n              size=\"large\"\n            />\n          </View>\n        ) : (\n          days.map((day, index) => (\n            <View key={index} style={styles.day}>\n              <View\n                style={{\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  width: '100%',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <Text style={styles.temp}>\n                  {/*  소수점 한 자리만 나타나게 함 */}\n                  {parseFloat(day.temp.day).toFixed(1)}\n                </Text>\n                <Fontisto\n                  name={icons[day.weather[0].main]}\n                  size={68}\n                  color=\"black\"\n                />\n              </View>\n\n              <Text style={styles.description}>{day.weather[0].main}</Text>\n              <Text style={styles.tinyText}>{day.weather[0].description}</Text>\n            </View>\n          ))\n        )}\n      </ScrollView>\n      <StatusBar />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'orange',\n  },\n  city: {\n    flex: 1.2,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  cityName: {\n    fontSize: 58,\n    fontWeight: '500',\n  },\n  weather: {},\n  day: {\n    width: SCREEN_WIDTH,\n    alignItems: 'flex-start',\n    paddingHorizontal: 20,\n  },\n  temp: {\n    marginTop: 50,\n    fontWeight: '600',\n    fontSize: 100,\n  },\n  description: {\n    marginTop: -10,\n    fontSize: 30,\n    fontWeight: '500',\n  },\n  tinyText: {\n    marginTop: -5,\n    fontSize: 25,\n    fontWeight: '500',\n  },\n});\n\n// StyleSheet.create를 쓰면 자동완성을 해준다.\n// view는 기본으로 disply:flex이다.\n// flex Direction 웹은 row가 기본, 앱은 column이 기본\n// width, height을 대부분 안 쓰고 flex 비율을 사용한다.\n// view가 하나만 있는 경우 수를 늘려도 1이다.\n// 몇 개의 props는 운영체제별로 되는 것도 있고 안 되는 것도 있다.\n"],"sourceRoot":""}